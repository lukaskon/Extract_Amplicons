#!/bin/bash -l
#SBATCH --job-name=blast_primers
#SBATCH --output=logs/blast_primers_%A_%a.out
#SBATCH --error=logs/blast_primers_%A_%a.err
#SBATCH --array=0-17
#SBATCH --time=01:00:00
#SBATCH --mem=20G
#SBATCH --cpus-per-task=1

module load ncbi-blast/2.16.0+
module load samtools/1.18

# Set primer FASTA file
PRIMER_FILE="primers/FOLac_primers.fasta"

# Set parameters
MAX_DIST=2000           # Maximum distance between primers
MISMATCHES_ALLOWED=2    # Number of mismatches allowed

# Auto-detect primer name
PRIMER_NAME=$(basename "$PRIMER_FILE" | sed 's/_primers\.fasta$//')

WORKDIR=$(pwd)
BLASTDB_DIR="/rhome/nicolel/bigdata/Fola/PutativeEffector/blast_databases"

PRIMERDIR="$WORKDIR/$PRIMER_NAME"
mkdir -p "$PRIMERDIR/hits"
mkdir -p "$PRIMERDIR/amplicon_fastas"

# Extract FWD and REV sequences from primer file
FWD=$(awk '/>FWD/{getline; print}' "$PRIMER_FILE")
REV=$(awk '/>REV/{getline; print}' "$PRIMER_FILE")

# Copy primer file for BLAST input
cp "$PRIMER_FILE" "$PRIMERDIR/${PRIMER_NAME}_primers.fasta"

mapfile -t GENOMES < genome_list.txt
GENOME="${GENOMES[$SLURM_ARRAY_TASK_ID]}"
if [ -z "$GENOME" ]; then
  echo "No genome for task $SLURM_ARRAY_TASK_ID"
  exit 1
fi

BASENAME=$(basename "$GENOME" | sed 's/\.[^.]*$//')
OUTFILE="$PRIMERDIR/hits/results_${PRIMER_NAME}_${BASENAME}.tsv"
DBNAME="$BLASTDB_DIR/${BASENAME}_db"

# Create BLAST database if it doesn't already exist
if [[ -f "${DBNAME}.nhr" && -f "${DBNAME}.nin" && -f "${DBNAME}.nsq" ]]; then
  echo "BLAST database $DBNAME exists."
else
  makeblastdb -in "$GENOME" -dbtype nucl -parse_seqids -out "$DBNAME"
fi

# Run BLAST
blastn -query "$PRIMERDIR/${PRIMER_NAME}_primers.fasta" -db "$DBNAME" -task blastn-short \
  -outfmt "6 qseqid sseqid pident length mismatch gapopen qstart qend sstart send" \
  > "$PRIMERDIR/hits/hits_${PRIMER_NAME}_${BASENAME}.txt"

# Compute allowed % identity thresholds for mismatches
FWD_LEN=${#FWD}
REV_LEN=${#REV}
FWD_ID=$(echo "scale=2; (1 - $MISMATCHES_ALLOWED / $FWD_LEN) * 100" | bc)
REV_ID=$(echo "scale=2; (1 - $MISMATCHES_ALLOWED / $REV_LEN) * 100" | bc)

# Parse hits
{
  echo -e "Subject\tFWD_Start\tFWD_End\tREV_Start\tREV_End\tProduct_Size\tFWD_Strand\tREV_Strand"
  awk -v plen_fwd=$FWD_LEN -v plen_rev=$REV_LEN -v id_fwd=$FWD_ID -v id_rev=$REV_ID -v maxdist=$MAX_DIST '
  function abs(x){ return x < 0 ? -x : x }
  {
    if ($1 == "FWD" && $3 >= id_fwd && abs($4 - plen_fwd) <= 2) {
      scaf = $2
      if (scaf ~ /^gb\|/) {
        sub(/^gb\|/, "", scaf)
        sub(/\|.*$/, "", scaf)
      }
      strand = ($9 <= $10) ? "+" : "-"
      fwd[scaf][strand] = $9"\t"$10
    }
    if ($1 == "REV" && $3 >= id_rev && abs($4 - plen_rev) <= 2) {
      scaf = $2
      if (scaf ~ /^gb\|/) {
        sub(/^gb\|/, "", scaf)
        sub(/\|.*$/, "", scaf)
      }
      strand = ($9 <= $10) ? "+" : "-"
      rev[scaf][strand] = $9"\t"$10
    }
  }
  END {
    for (scaf in fwd) {
      for (strand in fwd[scaf]) {
        split(fwd[scaf][strand], f, "\t")
        oppstrand = (strand == "+" ? "-" : "+")
        if (scaf in rev && oppstrand in rev[scaf]) {
          split(rev[scaf][oppstrand], r, "\t")
          dist = (f[1] < r[1]) ? r[1] - f[2] + 1 : f[1] - r[2] + 1
          if (dist <= maxdist && dist > 0) {
            print scaf"\t"f[1]"\t"f[2]"\t"r[1]"\t"r[2]"\t"dist"\t"strand"\t"oppstrand
          }
        }
      }
    }
  }
  ' "$PRIMERDIR/hits/hits_${PRIMER_NAME}_${BASENAME}.txt"
} > "$OUTFILE"

AMP_COUNT=$(tail -n +2 "$OUTFILE" | wc -l)
SUMMARYFILE="$PRIMERDIR/summary_${PRIMER_NAME}.tsv"
if [ ! -f "$SUMMARYFILE" ]; then
  echo -e "Genome\tAmplicon_Count" > "$SUMMARYFILE"
fi
echo -e "${BASENAME}\t${AMP_COUNT}" >> "$SUMMARYFILE"

# Extract amplicons using samtools
if [ "$AMP_COUNT" -gt 0 ]; then
  if [ ! -f "${GENOME}.fai" ]; then
    samtools faidx "$GENOME"
  fi

  n=1
  tail -n +2 "$OUTFILE" | while IFS=$'\t' read -r scaf fwd_start fwd_end rev_start rev_end prod_size fwd_strand rev_strand; do
#!/bin/bash -l
    if [ "$fwd_start" -lt "$rev_start" ]; then
      start=$fwd_start
      end=$rev_end
      strand_fwd=$fwd_strand
    else
      start=$rev_start
      end=$fwd_end
      strand_fwd=$rev_strand
    fi

    region="${scaf}:${start}-${end}"
    outfa="$PRIMERDIR/amplicon_fastas/${BASENAME}_${PRIMER_NAME}_amplicon_${n}.fasta"
    samtools faidx "$GENOME" "$region" > "$outfa"
    sed -i "1s/.*/>${BASENAME}_${scaf}:${start}-${end}/" "$outfa"

    if [ "$strand_fwd" = "-" ]; then
      seq=$(tail -n +2 "$outfa" | tr -d '\n' | tr 'ACGTacgt' 'TGCAtgca' | rev)
      echo ">${BASENAME}_${scaf}:${start}-${end}" > "$outfa"
      echo "$seq" >> "$outfa"
    fi

    n=$((n + 1))
  done
fi

echo "âœ… Done $BASENAME"
